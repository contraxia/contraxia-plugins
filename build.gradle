import java.text.SimpleDateFormat

// tag::versions[]
buildscript {
	dependencies {
		apply from: "versions.gradle"

		classpath "com.gradle.publish:plugin-publish-plugin:0.9.9"
		classpath "io.spring.gradle:dependency-management-plugin:${versions.'dependency.management.plugin.version'}"
		classpath 'org.ajoberstar:gradle-git-publish:0.2.1'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5-rc1'
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1"
		classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.4'
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
	}
}

apply(from: 'versions.gradle')

wrapper {
	gradleVersion = versions.'gradle.version'
}

// note that a production build creates javadoc, sources jars and signatures undesired during development
// for performance reasons
final boolean isProductionBuild = System.env.GRADLE_PUBLISH_KEY != null && System.env.GRADLE_PUBLISH_SECRET != null
if (isProductionBuild) {
	ext {
		System.setProperty("gradle.publish.key", System.env.GRADLE_PUBLISH_KEY)
		System.setProperty("gradle.publish.secret", System.env.GRADLE_PUBLISH_SECRET)
	}
}

final SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss")
if (isProductionBuild) {
	version = BUILD_VERSION_PREFIX + "." + format.format(new Date())
}
else {
	version = '0.0.0-SNAPSHOT'
}
group = GROUP_ID

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

gradle.beforeProject { Project project ->
	project.with {
		apply plugin: "eclipse"

		apply plugin: 'maven'

		def docs = project.name == 'crnk-documentation'
		def ui = project.name == 'crnk-ui'
		def testProject = project.name == 'crnk-test'
		def legacyBraveProject = project.name == 'crnk-brave'
		def examples = project.name.contains('example')

		if (!docs) {
			apply plugin: 'java'

			sourceCompatibility = 1.8
			targetCompatibility = 1.8

			dependencies {
				testCompile group: 'junit', name: 'junit', version: '4.12'
				testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
				testCompile group: 'org.assertj', name: 'assertj-core', version: '2.2.0'
			}

			test {
				testLogging {
					exceptionFormat = 'full'
				}
			}
		}

		if (!docs && !examples && !testProject && !legacyBraveProject) {
			// https://about.sonarqube.com/get-started/
			apply plugin: "org.sonarqube"
			apply plugin: "jacoco"

			jacoco {
				toolVersion = "0.7.6.201602180812"
			}

			rootProject.tasks.jacocoMerge.executionData tasks.withType(Test)
			rootProject.tasks.jacocoRootReport.additionalSourceDirs files(sourceSets.main.allSource.srcDirs)

			def sourceDirs = rootProject.tasks.jacocoRootReport.sourceDirectories
			def classDirs = rootProject.tasks.jacocoRootReport.classDirectories

			def mainOutput = files(files(sourceSets.main.output).collect {
				fileTree(dir: it, exclude: '**/legacy/**')
			})

			if (sourceDirs == null) {
				rootProject.tasks.jacocoRootReport.sourceDirectories = files(sourceSets.main.allSource.srcDirs)
				rootProject.tasks.jacocoRootReport.classDirectories = mainOutput

			}
			else {
				rootProject.tasks.jacocoRootReport.sourceDirectories = sourceDirs.plus(files(sourceSets.main.allSource.srcDirs))
				rootProject.tasks.jacocoRootReport.classDirectories = classDirs.plus(mainOutput)
			}
			rootProject.coveralls.sourceDirs.addAll(sourceSets.main.allSource.srcDirs.flatten())


			sonarqube {
				properties {
					property 'sonar.coverage.exclusions', "**/legacy/**"
				}
			}

			jacocoTestReport {
				reports {
					xml.enabled = true // coveralls plugin depends on xml format report
					html.enabled = true
				}
			}
		}

		apply plugin: 'maven-publish'

		task sourcesJar(type: Jar) {
			from sourceSets.main.allSource
			classifier = 'sources'
		}

		publishing {
			publications {
				mavenJava(MavenPublication) {
					from components.java

					artifact sourcesJar {
						classifier "sources"
					}
				}
			}
		}

	}
}

// coveralls setup
apply plugin: "jacoco"
apply plugin: "com.github.kt3k.coveralls"

def publishedProjects = subprojects.findAll {
	it.name != 'crnk-documentation' && it.name != 'crnk-ui' && it.name != 'crnk-test' && !it.name.contains('example')
}

task jacocoMerge(type: JacocoMerge) {
	destinationFile = new File(project.buildDir, 'jacoco/test.exec')
	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
	for (publishedProject in publishedProjects) {
		dependsOn publishedProject.path + ":check"
	}
}


task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
	description = 'Generates an aggregate report from all subprojects'

	dependsOn tasks.jacocoMerge

	executionData tasks.jacocoMerge.destinationFile

	reports {
		html.enabled = true // human readable
		xml.enabled = true // required by coveralls
	}

}


coveralls {
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
	group = 'Coverage reports'
	description = 'Uploads the aggregated coverage report to Coveralls'

	dependsOn jacocoRootReport
}
